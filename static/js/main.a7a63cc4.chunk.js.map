{"version":3,"sources":["components/month/Month.js","App.js","serviceWorker.js","index.js"],"names":["month","state","isShown","hoverHandler","setState","leaveHandler","m","this","props","color","birthdays","length","className","onMouseEnter","onMouseLeave","style","background","name","map","e","key","firstName","lastName","Component","App","months","axios","get","then","res","data","person","Date","dob","getMonth","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qQAmDeA,G,uNA9CXC,MAAQ,CACJC,SAAS,G,EAGbC,aAAe,WACX,EAAKC,SAAS,CACVF,SAAS,K,EAIjBG,aAAe,WACX,EAAKD,SAAS,CACVF,SAAS,K,uDAMb,IAAII,EAAIC,KAAKC,MAAMF,EACfG,EAAQ,cAOZ,OAN4BA,EAA3BH,EAAEI,UAAUC,QAAU,EAAa,OAC/BL,EAAEI,UAAUC,QAAU,EAAa,UAC/BL,EAAEI,UAAUC,QAAU,GAAc,UACzB,UAIhB,yBAAKC,UAAU,QACXC,aAAcN,KAAKJ,aACnBW,aAAgBP,KAAKF,aACrBU,MAAO,CAAEC,WAAYP,IAGpBH,EAAEW,KANP,cAMiBX,EAAEI,UAAUC,OAN7B,WAOKJ,KAAKN,MAAMC,QACRI,EAAEI,UAAUQ,KAAI,SAACC,GAAD,OACZ,yBAAKP,UAAU,eAAeQ,IAAKD,EAAEE,UAAUF,EAAEG,UAC5CH,EAAEE,UADP,IACmBF,EAAEG,aAErB,U,GAxCJC,c,iBCyFHC,E,4MApFbvB,MAAQ,CACNwB,OAAQ,CACN,CACAR,KAAM,MACNP,UAAW,IAEX,CACAO,KAAM,MACNP,UAAW,IAEX,CACAO,KAAM,MACNP,UAAW,IAEX,CACAO,KAAM,MACNP,UAAW,IAEX,CACAO,KAAM,MACNP,UAAW,IAEX,CACAO,KAAM,MACNP,UAAW,IAEX,CACAO,KAAM,MACNP,UAAW,IAEX,CACAO,KAAM,MACNP,UAAW,IAEX,CACAO,KAAM,MACNP,UAAW,IAEX,CACAO,KAAM,MACNP,UAAW,IAEX,CACAO,KAAM,MACNP,UAAW,IAEX,CACAO,KAAM,MACNP,UAAW,M,kEAIM,IAAD,OAClBgB,IAAMC,IAAI,kEACPC,MAAK,SAAAC,GACYA,EAAIC,KACZZ,KAAI,SAACa,GACX,IAAIN,EAAS,EAAKxB,MAAMwB,OAIxB,OAFAA,EADe,IAAIO,KAAKD,EAAOE,KAAKC,YACnBxB,UAAUyB,KAAKJ,GAChC,EAAK3B,SAAU,CAAEqB,YACV,U,+BAQX,OACE,oCAEElB,KAAKN,MAAMwB,OAAOP,KAAI,SAAClB,GAAD,OACpB,kBAAC,EAAD,CACEM,EAAIN,EACJoB,IAAOpB,EAAMiB,e,GA5EXM,aCIEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a7a63cc4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './Month.scss';\r\n\r\nclass month extends Component {\r\n    state = {\r\n        isShown: false\r\n    }\r\n\r\n    hoverHandler = () => {\r\n        this.setState({\r\n            isShown: true\r\n        })\r\n    }\r\n\r\n    leaveHandler = () => {\r\n        this.setState({\r\n            isShown: false\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        let m = this.props.m;\r\n        let color = 'transparent';\r\n        (m.birthdays.length <= 2) ? color = 'grey' :\r\n            (m.birthdays.length <= 6) ? color = '#5555f1' :\r\n                (m.birthdays.length <= 10) ? color = '#3b9a3b' :\r\n                    color = '#e85454';\r\n\r\n\r\n        return (\r\n            <div className=\"month\"\r\n                onMouseEnter={this.hoverHandler}\r\n                onMouseLeave = {this.leaveHandler}\r\n                style={{ background: color }}\r\n            >\r\n\r\n                {m.name} {`${m.birthdays.length} people`}\r\n                {this.state.isShown ?\r\n                    m.birthdays.map((e) =>\r\n                        <div className='month-people' key={e.firstName+e.lastName}>\r\n                            {e.firstName} {e.lastName}\r\n                        </div>\r\n                    ) : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default month;\r\n","import './App.scss';\r\nimport Month from './components/month/Month';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport './App.scss';\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n      months: [\r\n        { \r\n        name: 'Jan',\r\n        birthdays: []\r\n      },\r\n        { \r\n        name: 'Feb',\r\n        birthdays: []\r\n      },\r\n        { \r\n        name: 'Mar',\r\n        birthdays: []\r\n      },\r\n        { \r\n        name: 'Apr',\r\n        birthdays: []\r\n      },\r\n        { \r\n        name: 'May',\r\n        birthdays: []\r\n      },\r\n        { \r\n        name: 'Jun',\r\n        birthdays: [] \r\n      },\r\n        { \r\n        name: 'Jul',\r\n        birthdays: [] \r\n      },\r\n        { \r\n        name: 'Aug',\r\n        birthdays: [] \r\n      },\r\n        { \r\n        name: 'Sep',\r\n        birthdays: [] \r\n      },\r\n        { \r\n        name: 'Okt',\r\n        birthdays: [] \r\n      },\r\n        { \r\n        name: 'Nov',\r\n        birthdays: [] \r\n      },\r\n        { \r\n        name: 'Dec',\r\n        birthdays: [] \r\n      },\r\n      ]\r\n    }\r\n    componentDidMount() {\r\n      axios.get('https://yalantis-react-school-api.yalantis.com/api/task0/users')\r\n        .then(res => {\r\n          const persons = res.data;\r\n          persons.map((person) => {\r\n            let months = this.state.months;\r\n            let curMonth = new Date(person.dob).getMonth();\r\n            months[curMonth].birthdays.push(person);\r\n            this.setState( { months });\r\n            return true;\r\n          })\r\n        })\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n          <>\r\n          {\r\n            this.state.months.map((month) => (\r\n              <Month\r\n                m ={month}\r\n                key = {month.name}\r\n              />\r\n            ))\r\n          }\r\n        </>\r\n        );\r\n    }\r\n}\r\n\r\n  export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}